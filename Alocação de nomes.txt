#include <stdio.h>
#include <stdlib.h>

#define M 10
#define N 10
/*
Esse programa e uma versao de solucao do problema ler-imprimir-matriz que usa alocacao dinamica de mem√≥ria
*/

int ** alocaMatriz(int m,int n){
	//Alloca um vetor de ponteiros de tamanho m (num. de linhas).
	//Cada elemento desse vetor e' um ponteiro para uma linha da matriz
	// cada linha e alocada dinamicamente
	int** mat=(int**)calloc(m,sizeof(int*));
	if(mat){
		int i;
		for (i=0; i<m; i++) {
			mat[i]=(int*)malloc(sizeof(int)*n);
			if(!mat[i]){ //nao consegui alocar linha para mat[i], desalocar
				//espaco alocado para as linhas anteriores a i
				int j;
				for(j=0;j<i;j++){
					free(mat[j]);
				}
				return(NULL);
			}
		}
		return(mat);
	}
	return(NULL);
}
void desalocaMatriz(int** mat, int numLinhas){
	int i;
	free(mat[0]);
	for(i=0; i<numLinhas; i++){
		mat[i]=NULL;
	}
	free(mat);
	mat=NULL;
}

int main() {
	int**A;
	int m, n, i, j;
	
	do{
		scanf("%d", &m);
	}while(m<1 || m>M);	
	do{
		scanf("%d", &n);
	}while(n<1 || n>N);
	A=alocaMatriz(m,n);
	if(A){
		for( i=0; i<m; i++)
			for( j=0; j<n; j++)
				scanf("%d", &A[i][j]);
		for( i=0; i<m; i++) {
			printf("linha %d: ", i+1);
			for( j=0; j<n; j++) {
				if(j>0) printf(",");
				printf("%d", A[i][j]);
			}
			printf("\n");
		}
		desalocaMatriz(A,m);
	}
	return 0;
}